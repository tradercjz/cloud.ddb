from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime

# --- User Schemas ---
class UserBase(BaseModel):
    username: str

class UserCreate(UserBase):
    password: str

class UserInDB(UserBase):
    id: int
    class Config:
        from_attributes = True

# --- Token Schemas ---
class Token(BaseModel):
    access_token: str
    token_type: str

# --- Environment Schemas ---
class EnvironmentBase(BaseModel):
    spec_cpu: float = Field(..., gt=0, description="vCPU cores (e.g., 2.0)")
    spec_memory: float = Field(..., gt=0, description="Memory in GiB (e.g., 4.0)")

class EnvironmentCreate(EnvironmentBase):
    lifetime_hours: int = Field(default=24, le=48, description="How long the instance will live.")

class EnvironmentPublic(EnvironmentBase):
    id: str
    owner_id: int
    status: str
    message: Optional[str] = None
    public_ip: Optional[str] = None
    port: int
    region_id: str
    created_at: datetime
    expires_at: datetime

    class Config:
        from_attributes = True

class ChatQueryRequest(BaseModel):
    query: str = Field(..., description="User's natural language query.")
    # selected_tables_schema 是一个字典，键是表名，值是该表的schema描述
    # 这样后端就不需要重新查询schema，提高了效率
    selected_tables_schema: Dict[str, Any] = Field(..., description="Schema of the tables selected by the user.")
    # 历史对话可以帮助模型理解上下文，但我们先从简单的开始，设为可选
    history: Optional[List[Dict[str, str]]] = None

class ChatQueryResponse(BaseModel):
    response_type: str = Field(..., description="Type of the response, e.g., 'table', 'error', 'message'.")
    data: Any = Field(..., description="The content of the response, could be a list of records, an error message, etc.")
    generated_script: Optional[str] = Field(None, description="The DolphinDB script generated by the AI.")